#Brandon Troisi
#4/6/16
#lsystem.py
#version2

import sys

class Lsystem:
    '''
    L-system class. Contains functions necessary to create an L-system.
    File or generate a string the L-system rules.
    '''

    def __init__(self, filename = None):
        '''
        Loads in a file, or just initialize the files to indicate
        there is an empty L-system
        '''
        self.base = ''
        self.rules = []
        if filename!=None:
            self.read(filename)
            
    def setBase(self, newbase):
    	'''
    	Sets the base of L-system
    	'''
        self.base = newbase
          
    def getBase(self):
    	'''
    	Returns the base of L-system
    	'''
        return self.base
        
    def addRule(self, newrule):
    	'''
    	Adds a rule to the list of rules of L-system
    	'''
        self.rules.append(newrule)
        
    def read( self, filename):
    	'''
    	Reads in the base and rule from the file filename and 
    	'''
        fp = open(filename,'r')
        lines=fp.readlines()
        fp.close()
        
        for element in lines:
            words=element.split()
            if words[0]=='base':
                self.setBase(words[1])
            elif words[0] == 'rule':
                self.addRule(words[1:]) 
                
    def replace(self, inputString):
    	'''
    	We scan through the string that defines the L-system, and for each character 
    	we test if there is a rule. If a rule exists, we add the replacement to a 
    	new string, otherwise we add the character itself to the new string.
    	'''
        newString= ''
        for c in inputString:
            found=False
            for rule in self.rules:
                if rule[0]==c:
                    newString += rule[1]
                    found = True
                    break
            if found == False:
                newString+=c
        return newString   
        
    
    def buildString(self, iterations):
    	'''
    	Return a string generated by applying the L-system rules
      	for iterations iterations 
      	'''
        newString=self.base
        for i in range(iterations):
            newString=self.replace(newString)
        return newString
        
def main(argv):

      if len(argv) < 4:
          print 'Usage: lsystem.py <filename> <iterations> <output file>'
          exit()
 
      filename = argv[1]
      iterations = int(argv[2])
      outfile = argv[3]

      lsys = Lsystem()

      lsys.read( filename )

      lstr = lsys.buildString( iterations )

      fp = file( outfile, 'w' )
      fp.write(lstr)
      fp.close()

if __name__ == "__main__":
    main(sys.argv)
	
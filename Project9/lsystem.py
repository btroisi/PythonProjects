#Brandon Troisi
#4/6/16
#lsystem.py
#version3

import sys
import random

class Lsystem:
	'''
	L-system class. Contains functions necessary to create an L-system.
	File or generate a string the L-system rules.
	'''

	def __init__(self, filename = None):
		'''
		Loads in a file, or just initialize the files to indicate
		there is an empty L-system
		'''
		self.base = ''
		self.rules = {}
		if filename!=None:
			self.read(filename)
			
	def setBase(self, newbase):
		'''
		Sets the base of L-system
		'''
		self.base = newbase
		  
	def getBase(self):
		'''
		Returns the base of L-system
		'''
		return self.base
		
	def addRule(self, newrule):
		'''
		Adds a rule to the list of rules of L-system
		'''
		self.rules[newrule[0]] = newrule[1:]
		
	def read( self, filename):
		'''
		Reads in the base and rule from the file filename and 
		'''
		fp = open(filename,'r')
		lines=fp.readlines()
		fp.close()
		
		for element in lines:
			words=element.split()
			if words[0]=='base':
				self.setBase(words[1])
			elif words[0] == 'rule':
				self.addRule(words[1:]) 
				
	def replace(self, inputString):
		'''
		We scan through the string that defines the L-system, and for each character 
		we test if there is a rule. If a rule exists, we add the replacement to a 
		new string, otherwise we add the character itself to the new string.
		'''
		newString= ''
		for c in inputString:
			if c in self.rules:
				newString += random.choice(self.rules[c])
			else:
				newString+=c
				
		return newString   
		
	
	def buildString(self, iterations):
		'''
		Return a string generated by applying the L-system rules
		for iterations iterations 
		'''
		newString=self.base
		for i in range(iterations):
			newString=self.replace(newString)
		return newString
		

	